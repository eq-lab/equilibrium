// This file is part of Equilibrium.

// Copyright (C) 2023 EQ Lab.
// SPDX-License-Identifier: GPL-3.0-or-later

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

use super::*;

use common_runtime::AccountId;
#[cfg(not(feature = "production"))]
use eq_node_runtime::SudoConfig;
use eq_node_runtime::{
    eq_primitives::{
        asset::{self, AssetType, AssetXcmData, OtherReservedData},
        balance_number::EqFixedU128,
        XcmMode,
    },
    opaque::SessionKeys,
    AuraConfig, BailsmanConfig, ClaimsConfig, CouncilConfig, CouncilMembershipConfig,
    DemocracyConfig, EqAssetsConfig, EqBalancesConfig, EqDexConfig, EqInvestorsConfig,
    EqLiquidityFarmingConfig, EqMultisigSudoConfig, EqTreasuryConfig, FinancialConfig, FixedI64,
    GenesisConfig, OracleConfig, ParachainInfoConfig, PolkadotXcmConfig, RepublicConfig,
    SessionConfig, SubaccountsConfig, SystemConfig, TechnicalCommitteeConfig,
    TechnicalCommitteeMembershipConfig, Vesting2Config, Vesting3Config, Vesting4Config,
    VestingConfig, WhitelistsConfig, WASM_BINARY,
};
use sp_runtime::{traits::CheckedConversion, BoundedVec, Percent};

fn session_keys(aura: AuraId, eq_rate: EqRateId) -> SessionKeys {
    SessionKeys { aura, eq_rate }
}

pub const EQUILIBRIUM_PARACHAIN_ID: u32 = 2011;

pub type ChainSpec = sc_service::GenericChainSpec<GenesisConfig, Extensions>;

pub fn development_config() -> ChainSpec {
    ChainSpec::from_genesis(
        "Equilibrium Development",
        "equilibrium-dev",
        ChainType::Development,
        move || {
            testnet_genesis(
                vec![authority_keys_from_seed("Alice")],
                get_account_id_from_seed::<sr25519::Public>("Alice"),
                vec![
                    //get_account_id_from_seed::<sr25519::Public>("Alice"),
                ],
                vec![
                    get_account_id_from_seed::<sr25519::Public>("Alice"),
                    get_account_id_from_seed::<sr25519::Public>("Bob"),
                    get_account_id_from_seed::<sr25519::Public>("Alice//stash"),
                    get_account_id_from_seed::<sr25519::Public>("Bob//stash"),
                ],
                true,
                EQUILIBRIUM_PARACHAIN_ID.into(),
            )
        },
        vec![],
        None,
        None,
        None,
        Some(get_properties()),
        Extensions {
            relay_chain: "polkadot-local".into(), // Polkadot local testnet config (multivalidator Alice + Bob)
            para_id: EQUILIBRIUM_PARACHAIN_ID,
        },
    )
}

pub fn local_testnet_config() -> ChainSpec {
    // let wasm_binary = WASM_BINARY;

    ChainSpec::from_genesis(
        "Equilibrium Local Testnet",
        "equilibrium-local",
        ChainType::Local,
        move || {
            testnet_genesis(
                vec![
                    authority_keys_from_seed("Alice"),
                    authority_keys_from_seed("Bob"),
                ],
                get_account_id_from_seed::<sr25519::Public>("Alice"),
                vec![
                    get_account_id_from_seed::<sr25519::Public>("Alice"),
                    get_account_id_from_seed::<sr25519::Public>("Bob"),
                ],
                vec![
                    get_account_id_from_seed::<sr25519::Public>("Alice"),
                    get_account_id_from_seed::<sr25519::Public>("Bob"),
                    get_account_id_from_seed::<sr25519::Public>("Charlie"),
                    get_account_id_from_seed::<sr25519::Public>("Dave"),
                    get_account_id_from_seed::<sr25519::Public>("Eve"),
                    get_account_id_from_seed::<sr25519::Public>("Ferdie"),
                    get_account_id_from_seed::<sr25519::Public>("Alice//stash"),
                    get_account_id_from_seed::<sr25519::Public>("Bob//stash"),
                    get_account_id_from_seed::<sr25519::Public>("Charlie//stash"),
                    get_account_id_from_seed::<sr25519::Public>("Dave//stash"),
                    get_account_id_from_seed::<sr25519::Public>("Eve//stash"),
                    get_account_id_from_seed::<sr25519::Public>("Ferdie//stash"),
                    chainbridge::MODULE_ID.into_account_truncating(),
                ],
                true,
                EQUILIBRIUM_PARACHAIN_ID.into(),
            )
        },
        vec![],
        None,
        None,
        None,
        Some(get_properties()),
        Extensions {
            relay_chain: "polkadot-local".into(),
            para_id: EQUILIBRIUM_PARACHAIN_ID,
        },
    )
}

pub fn mainnet_config() -> Result<ChainSpec, String> {
    ChainSpec::from_json_bytes(&include_bytes!("../../chain-specs/equilibrium-mainnet.json")[..])
}

fn testnet_genesis(
    initial_authorities: Vec<(AccountId, AccountId, AuraId, EqRateId)>,
    root_key: AccountId,
    whitelisted_accounts: Vec<AccountId>,
    endowed_accounts: Vec<AccountId>,
    _enable_println: bool,
    id: ParaId,
) -> GenesisConfig {
    const DEFAULT_BALANCE: u128 = 1 << 50;
    GenesisConfig {
        system: SystemConfig {
            code: WASM_BINARY.unwrap().to_vec(),
        },
        eq_assets: EqAssetsConfig {
            // Eq, FixedI128::zero()
            // Eth, FixedI128::saturating_from_rational(2, 5)
            // Btc, FixedI128::saturating_from_rational(2, 5)
            // Eos, FixedI128::saturating_from_rational(2, 5)
            // Dot, FixedI128::saturating_from_rational(2, 5)
            // Crv, FixedI128::saturating_from_rational(2, 5)
            _runtime: PhantomData,
            assets: vec![
                (
                    asset::EQD.get_id(),
                    EqFixedU128::saturating_from_integer(1000),
                    FixedI64::saturating_from_rational(1, 100),
                    Permill::from_rational(5u32, 10_000u32),
                    Permill::from_rational(1u32, 1000u32),
                    AssetXcmData::SelfReserved.encode(),
                    Permill::from_rational(2u32, 5u32),
                    1,
                    AssetType::Synthetic,
                    true,
                    Percent::one(),
                    Permill::one(),
                ),
                (
                    asset::BTC.get_id(),
                    EqFixedU128::saturating_from_rational(1845, 100000),
                    FixedI64::saturating_from_integer(1),
                    Permill::from_rational(5u32, 10_000u32),
                    Permill::from_rational(1u32, 1000u32),
                    vec![],
                    Permill::from_rational(2u32, 5u32),
                    2,
                    AssetType::Physical,
                    true,
                    Percent::one(),
                    Permill::one(),
                ),
                (
                    asset::ETH.get_id(),
                    EqFixedU128::saturating_from_rational(5612, 10000),
                    FixedI64::saturating_from_rational(1, 10),
                    Permill::from_rational(5u32, 10_000u32),
                    Permill::from_rational(1u32, 1000u32),
                    vec![],
                    Permill::from_rational(2u32, 5u32),
                    3,
                    AssetType::Physical,
                    true,
                    Percent::one(),
                    Permill::one(),
                ),
                (
                    asset::DOT.get_id(),
                    EqFixedU128::saturating_from_rational(331455, 10000),
                    FixedI64::saturating_from_rational(1, 100),
                    Permill::from_rational(5u32, 10_000u32),
                    Permill::from_rational(1u32, 1000u32),
                    AssetXcmData::OtherReserved(OtherReservedData {
                        multi_location: MultiLocation {
                            parents: 1,
                            interior: Here,
                        },
                        decimals: 10,
                    })
                    .encode(),
                    Permill::from_rational(2u32, 5u32),
                    4,
                    AssetType::Physical,
                    true,
                    Percent::from_rational(95u32, 100u32),
                    Permill::one(),
                ),
                (
                    asset::CRV.get_id(),
                    EqFixedU128::saturating_from_rational(3875969, 10000),
                    FixedI64::saturating_from_rational(1, 100),
                    Permill::from_rational(5u32, 10_000u32),
                    Permill::from_rational(1u32, 1000u32),
                    vec![],
                    Permill::from_rational(2u32, 5u32),
                    5,
                    AssetType::Physical,
                    true,
                    Percent::one(),
                    Permill::one(),
                ),
                (
                    asset::EOS.get_id(),
                    EqFixedU128::saturating_from_rational(2123142, 10000),
                    FixedI64::saturating_from_rational(1, 100),
                    Permill::from_rational(5u32, 10_000u32),
                    Permill::from_rational(1u32, 1000u32),
                    vec![],
                    Permill::from_rational(2u32, 5u32),
                    6,
                    AssetType::Physical,
                    true,
                    Percent::one(),
                    Permill::one(),
                ),
                (
                    asset::GENS.get_id(),
                    EqFixedU128::saturating_from_integer(25000),
                    FixedI64::saturating_from_rational(1, 100),
                    Permill::from_rational(5u32, 10_000u32),
                    Permill::from_rational(1u32, 1000u32),
                    AssetXcmData::SelfReserved.encode(),
                    Permill::from_rational(2u32, 5u32),
                    100,
                    AssetType::Physical,
                    true,
                    Percent::one(),
                    Permill::one(),
                ),
                (
                    asset::DAI.get_id(),
                    EqFixedU128::saturating_from_integer(1000),
                    FixedI64::saturating_from_rational(1, 100),
                    Permill::from_rational(5u32, 10_000u32),
                    Permill::from_rational(1u32, 1000u32),
                    vec![],
                    Permill::from_rational(2u32, 5u32),
                    7,
                    AssetType::Physical,
                    true,
                    Percent::one(),
                    Permill::one(),
                ),
                (
                    asset::USDT.get_id(),
                    EqFixedU128::saturating_from_integer(1000),
                    FixedI64::saturating_from_rational(1, 100),
                    Permill::from_rational(5u32, 10_000u32),
                    Permill::from_rational(1u32, 1000u32),
                    AssetXcmData::OtherReserved(OtherReservedData {
                        multi_location: MultiLocation {
                            parents: 1,
                            interior: X3(Parachain(1000), PalletInstance(50), GeneralIndex(1984)),
                        },
                        decimals: 6,
                    })
                    .encode(),
                    Permill::from_rational(2u32, 5u32),
                    8,
                    AssetType::Physical,
                    true,
                    Percent::one(),
                    Permill::one(),
                ),
                (
                    asset::USDC.get_id(),
                    EqFixedU128::saturating_from_integer(1000),
                    FixedI64::saturating_from_rational(1, 100),
                    Permill::from_rational(5u32, 10_000u32),
                    Permill::from_rational(1u32, 1000u32),
                    vec![],
                    Permill::from_rational(2u32, 5u32),
                    11,
                    AssetType::Physical,
                    true,
                    Percent::one(),
                    Permill::one(),
                ),
                (
                    asset::BUSD.get_id(),
                    EqFixedU128::saturating_from_integer(1000),
                    FixedI64::saturating_from_rational(1, 100),
                    Permill::from_rational(5u32, 10_000u32),
                    Permill::from_rational(1u32, 1000u32),
                    vec![],
                    Permill::from_rational(2u32, 5u32),
                    9,
                    AssetType::Physical,
                    true,
                    Percent::one(),
                    Permill::one(),
                ),
                (
                    asset::BNB.get_id(),
                    EqFixedU128::saturating_from_integer(1000),
                    FixedI64::saturating_from_rational(1, 100),
                    Permill::zero(),
                    Permill::zero(),
                    vec![],
                    Permill::zero(),
                    12,
                    AssetType::Physical,
                    true,
                    Percent::from_rational(85u32, 100u32),
                    Permill::one(),
                ),
                (
                    asset::WBTC.get_id(),
                    EqFixedU128::saturating_from_integer(1000),
                    FixedI64::saturating_from_rational(1, 100),
                    Permill::zero(),
                    Permill::zero(),
                    vec![],
                    Permill::zero(),
                    13,
                    AssetType::Physical,
                    true,
                    Percent::one(),
                    Permill::one(),
                ),
                (
                    asset::EQ.get_id(),
                    EqFixedU128::saturating_from_rational(47393, 10),
                    FixedI64::saturating_from_rational(1, 100),
                    Permill::from_rational(5u32, 10_000u32),
                    Permill::from_rational(1u32, 1000u32),
                    AssetXcmData::SelfReserved.encode(),
                    Permill::zero(),
                    u64::MAX,
                    AssetType::Native,
                    true,
                    Percent::from_rational(4u32, 10u32),
                    Permill::one(),
                ),
                (
                    asset::Q.get_id(),
                    EqFixedU128::saturating_from_rational(47393, 10),
                    FixedI64::saturating_from_rational(1, 100),
                    Permill::from_rational(5u32, 10_000u32),
                    Permill::from_rational(1u32, 1000u32),
                    AssetXcmData::SelfReserved.encode(),
                    Permill::zero(),
                    u64::MAX,
                    AssetType::Physical,
                    true,
                    Percent::from_rational(4u32, 10u32),
                    Permill::one(),
                ),
                (
                    asset::ACA.get_id(),
                    EqFixedU128::saturating_from_integer(1000),
                    FixedI64::saturating_from_rational(1, 100),
                    Permill::from_rational(5u32, 10_000u32),
                    Permill::from_rational(1u32, 1000u32),
                    AssetXcmData::OtherReserved(OtherReservedData {
                        multi_location: MultiLocation {
                            parents: 1,
                            interior: X2(
                                Parachain(2000),
                                GeneralKey {
                                    length: 2,
                                    data: [
                                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        0x00, 0x00,
                                    ],
                                },
                            ),
                        },
                        decimals: 12,
                    })
                    .encode(),
                    Permill::zero(),
                    14,
                    AssetType::Physical,
                    true,
                    Percent::one(),
                    Permill::one(),
                ),
                (
                    asset::AUSD.get_id(),
                    EqFixedU128::saturating_from_integer(1000),
                    FixedI64::saturating_from_rational(1, 100),
                    Permill::from_rational(5u32, 10_000u32),
                    Permill::from_rational(1u32, 1000u32),
                    AssetXcmData::OtherReserved(OtherReservedData {
                        multi_location: MultiLocation {
                            parents: 1,
                            interior: X2(
                                Parachain(2000),
                                GeneralKey {
                                    length: 2,
                                    data: [
                                        0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        0x00, 0x00,
                                    ],
                                },
                            ),
                        },
                        decimals: 12,
                    })
                    .encode(),
                    Permill::zero(),
                    15,
                    AssetType::Physical,
                    true,
                    Percent::one(),
                    Permill::one(),
                ),
                (
                    asset::GLMR.get_id(),
                    EqFixedU128::saturating_from_integer(1000),
                    FixedI64::saturating_from_rational(1, 100),
                    Permill::from_rational(5u32, 10_000u32),
                    Permill::from_rational(1u32, 1000u32),
                    AssetXcmData::OtherReserved(OtherReservedData {
                        multi_location: MultiLocation {
                            parents: 1,
                            interior: X2(Parachain(2004), PalletInstance(10)),
                        },
                        decimals: 18,
                    })
                    .encode(),
                    Permill::zero(),
                    16,
                    AssetType::Physical,
                    true,
                    Percent::one(),
                    Permill::one(),
                ),
                (
                    asset::PARA.get_id(),
                    EqFixedU128::saturating_from_integer(1000),
                    FixedI64::saturating_from_rational(1, 100),
                    Permill::from_rational(5u32, 10_000u32),
                    Permill::from_rational(1u32, 1000u32),
                    AssetXcmData::OtherReserved(OtherReservedData {
                        multi_location: MultiLocation {
                            parents: 1,
                            interior: X2(Parachain(2012), {
                                let id = (b"PARA").to_vec();
                                let mut data = [0u8; 32];
                                data[..id.len()].copy_from_slice(&id[..]);
                                GeneralKey { length: 2, data }
                            }),
                        },
                        decimals: 12,
                    })
                    .encode(),
                    Permill::zero(),
                    17,
                    AssetType::Physical,
                    true,
                    Percent::one(),
                    Permill::one(),
                ),
                (
                    asset::EQDOT.get_id(),
                    EqFixedU128::saturating_from_integer(1000),
                    FixedI64::saturating_from_rational(1, 100),
                    Permill::from_rational(5u32, 10_000u32),
                    Permill::from_rational(1u32, 1000u32),
                    vec![],
                    Permill::from_rational(2u32, 5u32),
                    18,
                    AssetType::Physical,
                    true,
                    Percent::one(),
                    Permill::one(),
                ),
            ],
        },
        eq_balances: EqBalancesConfig {
            balances: endowed_accounts
                .iter()
                .cloned()
                .map(|k| (k, vec![(DEFAULT_BALANCE, asset::EQ.get_id())]))
                .collect(),
            is_transfers_enabled: true,
            is_xcm_enabled: Some(XcmMode::Xcm(true)),
        },
        subaccounts: SubaccountsConfig {
            balances: vec![],
            timestamp: SystemTime::now()
                .duration_since(SystemTime::UNIX_EPOCH)
                .unwrap()
                .as_secs(),
        },
        whitelists: WhitelistsConfig {
            whitelist: whitelisted_accounts,
        },
        republic: RepublicConfig { empty: () },
        eq_investors: EqInvestorsConfig { empty: () },
        eq_liquidity_farming: EqLiquidityFarmingConfig { empty: () },
        eq_treasury: EqTreasuryConfig { empty: () },
        vesting: VestingConfig::default(),
        vesting_2: Vesting2Config::default(),
        vesting_3: Vesting3Config::default(),
        vesting_4: Vesting4Config::default(),
        aura: AuraConfig {
            authorities: vec![],
        },
        #[cfg(not(feature = "production"))]
        sudo: SudoConfig {
            key: Some(root_key.clone()),
        },
        session: SessionConfig {
            keys: initial_authorities
                .iter()
                .map(|x| {
                    (
                        x.0.clone(),
                        x.0.clone(),
                        session_keys(x.2.clone(), x.3.clone()),
                    )
                })
                .collect::<Vec<_>>(),
        },
        // bailsman: BailsmanConfig { bailsmen: vec![] },
        eq_session_manager: eq_session_manager::GenesisConfig {
            validators: initial_authorities
                .iter()
                .map(|(x, ..)| x.clone())
                .collect(),
        },

        financial: get_financial_config(),

        chain_bridge: Default::default(),

        eq_bridge: Default::default(),

        eq_lockdrop: Default::default(),

        treasury: Default::default(),

        eq_multisig_sudo: EqMultisigSudoConfig {
            keys: vec![root_key.clone()],
            threshold: 1,
        },

        eq_dex: EqDexConfig {
            chunk_corridors: vec![
                (asset::EQD, 5),
                (asset::BTC, 5),
                (asset::ETH, 5),
                (asset::DOT, 5),
                (asset::CRV, 5),
                (asset::EOS, 5),
                (asset::EQ, 5),
                (asset::GENS, 5),
                (asset::DAI, 5),
                (asset::USDT, 5),
                (asset::BUSD, 5),
                (asset::USDC, 5),
            ],
        },
        aura_ext: Default::default(),
        parachain_system: Default::default(),
        parachain_info: ParachainInfoConfig { parachain_id: id },
        polkadot_xcm: PolkadotXcmConfig {
            safe_xcm_version: Some(SAFE_XCM_VERSION),
        },
        claims: ClaimsConfig {
            vesting: vec![],
            claims: vec![],
        },
        oracle: OracleConfig {
            update_date: 0,
            prices: vec![],
        },
        bailsman: BailsmanConfig { bailsmen: vec![] },
        eq_lending: Default::default(),
        eq_wrapped_dot: Default::default(),

        council: CouncilConfig {
            phantom: PhantomData,
            members: vec![],
        },
        council_membership: CouncilMembershipConfig {
            phantom: PhantomData,
            members: BoundedVec::checked_from(vec![root_key.clone()]).unwrap(),
        },

        technical_committee: TechnicalCommitteeConfig {
            phantom: PhantomData,
            members: vec![],
        },
        technical_committee_membership: TechnicalCommitteeMembershipConfig {
            phantom: PhantomData,
            members: BoundedVec::checked_from(vec![root_key.clone()]).unwrap(),
        },

        democracy: DemocracyConfig::default(),

        crowdloan_distribution: Default::default(),

        stabilization_pool: Default::default(),
    }
}

fn get_properties() -> Properties {
    let mut properties = sc_chain_spec::Properties::new();
    properties.insert("ss58Format".into(), 68.into());
    properties.insert("tokenDecimals".to_string(), 9.into());
    properties.insert("tokenSymbol".to_string(), "TOKEN".into());
    properties
}

/// Returns `FinancialConfig` with 31 different price points for each `Currency` (except USD, where
/// all 31 points are the same). Latest timestamp is current time.
///
/// IMPORTANT: financial pallet fills in all points from one vector, so there is no need to
/// create multiple price points for each currency: there should be only one price point with
/// vector of all historic prices
fn get_financial_config() -> FinancialConfig {
    let current_time = SystemTime::now()
        .duration_since(SystemTime::UNIX_EPOCH)
        .unwrap()
        .as_secs()
        / 600
        * 600;
    FinancialConfig {
        prices: vec![
            (
                asset::EQD,
                vec![I64F64::from_num(1); 31],
                core::time::Duration::from_secs(current_time),
            ),
            (
                asset::EQ,
                vec![
                    I64F64::wrapping_from_str("2.11").unwrap(),
                    I64F64::wrapping_from_str("2.07").unwrap(),
                    I64F64::wrapping_from_str("2.32").unwrap(),
                    I64F64::wrapping_from_str("2.29").unwrap(),
                    I64F64::wrapping_from_str("2.25").unwrap(),
                    I64F64::wrapping_from_str("2.41").unwrap(),
                    I64F64::wrapping_from_str("2.38").unwrap(),
                    I64F64::wrapping_from_str("2.59").unwrap(),
                    I64F64::wrapping_from_str("2.62").unwrap(),
                    I64F64::wrapping_from_str("2.87").unwrap(),
                    I64F64::wrapping_from_str("2.90").unwrap(),
                    I64F64::wrapping_from_str("3.10").unwrap(),
                    I64F64::wrapping_from_str("3.21").unwrap(),
                    I64F64::wrapping_from_str("3.03").unwrap(),
                    I64F64::wrapping_from_str("2.77").unwrap(),
                    I64F64::wrapping_from_str("2.90").unwrap(),
                    I64F64::wrapping_from_str("2.85").unwrap(),
                    I64F64::wrapping_from_str("2.91").unwrap(),
                    I64F64::wrapping_from_str("2.90").unwrap(),
                    I64F64::wrapping_from_str("2.84").unwrap(),
                    I64F64::wrapping_from_str("3.01").unwrap(),
                    I64F64::wrapping_from_str("2.98").unwrap(),
                    I64F64::wrapping_from_str("3.04").unwrap(),
                    I64F64::wrapping_from_str("2.90").unwrap(),
                    I64F64::wrapping_from_str("2.95").unwrap(),
                    I64F64::wrapping_from_str("2.61").unwrap(),
                    I64F64::wrapping_from_str("2.44").unwrap(),
                    I64F64::wrapping_from_str("2.47").unwrap(),
                    I64F64::wrapping_from_str("2.37").unwrap(),
                    I64F64::wrapping_from_str("2.31").unwrap(),
                ],
                core::time::Duration::from_secs(current_time),
            ),
            (
                asset::Q,
                vec![
                    I64F64::wrapping_from_str("2.11").unwrap(),
                    I64F64::wrapping_from_str("2.07").unwrap(),
                    I64F64::wrapping_from_str("2.32").unwrap(),
                    I64F64::wrapping_from_str("2.29").unwrap(),
                    I64F64::wrapping_from_str("2.25").unwrap(),
                    I64F64::wrapping_from_str("2.41").unwrap(),
                    I64F64::wrapping_from_str("2.38").unwrap(),
                    I64F64::wrapping_from_str("2.59").unwrap(),
                    I64F64::wrapping_from_str("2.62").unwrap(),
                    I64F64::wrapping_from_str("2.87").unwrap(),
                    I64F64::wrapping_from_str("2.90").unwrap(),
                    I64F64::wrapping_from_str("3.10").unwrap(),
                    I64F64::wrapping_from_str("3.21").unwrap(),
                    I64F64::wrapping_from_str("3.03").unwrap(),
                    I64F64::wrapping_from_str("2.77").unwrap(),
                    I64F64::wrapping_from_str("2.90").unwrap(),
                    I64F64::wrapping_from_str("2.85").unwrap(),
                    I64F64::wrapping_from_str("2.91").unwrap(),
                    I64F64::wrapping_from_str("2.90").unwrap(),
                    I64F64::wrapping_from_str("2.84").unwrap(),
                    I64F64::wrapping_from_str("3.01").unwrap(),
                    I64F64::wrapping_from_str("2.98").unwrap(),
                    I64F64::wrapping_from_str("3.04").unwrap(),
                    I64F64::wrapping_from_str("2.90").unwrap(),
                    I64F64::wrapping_from_str("2.95").unwrap(),
                    I64F64::wrapping_from_str("2.61").unwrap(),
                    I64F64::wrapping_from_str("2.44").unwrap(),
                    I64F64::wrapping_from_str("2.47").unwrap(),
                    I64F64::wrapping_from_str("2.37").unwrap(),
                    I64F64::wrapping_from_str("2.31").unwrap(),
                ],
                core::time::Duration::from_secs(current_time),
            ),
            (
                asset::ETH,
                vec![
                    I64F64::wrapping_from_str("1781.99").unwrap(),
                    I64F64::wrapping_from_str("1570.20").unwrap(),
                    I64F64::wrapping_from_str("1626.58").unwrap(),
                    I64F64::wrapping_from_str("1475.70").unwrap(),
                    I64F64::wrapping_from_str("1446.03").unwrap(),
                    I64F64::wrapping_from_str("1459.97").unwrap(),
                    I64F64::wrapping_from_str("1416.05").unwrap(),
                    I64F64::wrapping_from_str("1564.71").unwrap(),
                    I64F64::wrapping_from_str("1492.61").unwrap(),
                    I64F64::wrapping_from_str("1575.85").unwrap(),
                    I64F64::wrapping_from_str("1541.91").unwrap(),
                    I64F64::wrapping_from_str("1533.27").unwrap(),
                    I64F64::wrapping_from_str("1654.74").unwrap(),
                    I64F64::wrapping_from_str("1723.15").unwrap(),
                    I64F64::wrapping_from_str("1834.73").unwrap(),
                    I64F64::wrapping_from_str("1868.05").unwrap(),
                    I64F64::wrapping_from_str("1799.17").unwrap(),
                    I64F64::wrapping_from_str("1826.19").unwrap(),
                    I64F64::wrapping_from_str("1772.10").unwrap(),
                    I64F64::wrapping_from_str("1924.69").unwrap(),
                    I64F64::wrapping_from_str("1854.56").unwrap(),
                    I64F64::wrapping_from_str("1791.70").unwrap(),
                    I64F64::wrapping_from_str("1806.97").unwrap(),
                    I64F64::wrapping_from_str("1823.45").unwrap(),
                    I64F64::wrapping_from_str("1782.86").unwrap(),
                    I64F64::wrapping_from_str("1817.62").unwrap(),
                    I64F64::wrapping_from_str("1812.63").unwrap(),
                    I64F64::wrapping_from_str("1788.22").unwrap(),
                    I64F64::wrapping_from_str("1691.33").unwrap(),
                    I64F64::wrapping_from_str("1678.65").unwrap(),
                ],
                core::time::Duration::from_secs(current_time),
            ),
            (
                asset::BTC,
                vec![
                    I64F64::wrapping_from_str("54207.32").unwrap(),
                    I64F64::wrapping_from_str("48824.43").unwrap(),
                    I64F64::wrapping_from_str("49705.33").unwrap(),
                    I64F64::wrapping_from_str("47093.85").unwrap(),
                    I64F64::wrapping_from_str("46339.76").unwrap(),
                    I64F64::wrapping_from_str("46188.45").unwrap(),
                    I64F64::wrapping_from_str("45137.77").unwrap(),
                    I64F64::wrapping_from_str("49631.24").unwrap(),
                    I64F64::wrapping_from_str("48378.99").unwrap(),
                    I64F64::wrapping_from_str("50538.24").unwrap(),
                    I64F64::wrapping_from_str("48561.17").unwrap(),
                    I64F64::wrapping_from_str("48927.30").unwrap(),
                    I64F64::wrapping_from_str("48912.38").unwrap(),
                    I64F64::wrapping_from_str("51206.69").unwrap(),
                    I64F64::wrapping_from_str("52246.52").unwrap(),
                    I64F64::wrapping_from_str("54824.12").unwrap(),
                    I64F64::wrapping_from_str("56008.55").unwrap(),
                    I64F64::wrapping_from_str("57805.12").unwrap(),
                    I64F64::wrapping_from_str("57332.09").unwrap(),
                    I64F64::wrapping_from_str("61243.08").unwrap(),
                    I64F64::wrapping_from_str("59302.32").unwrap(),
                    I64F64::wrapping_from_str("55907.20").unwrap(),
                    I64F64::wrapping_from_str("56804.90").unwrap(),
                    I64F64::wrapping_from_str("58870.89").unwrap(),
                    I64F64::wrapping_from_str("57858.92").unwrap(),
                    I64F64::wrapping_from_str("58346.65").unwrap(),
                    I64F64::wrapping_from_str("58313.64").unwrap(),
                    I64F64::wrapping_from_str("57523.42").unwrap(),
                    I64F64::wrapping_from_str("54529.15").unwrap(),
                    I64F64::wrapping_from_str("54738.94").unwrap(),
                ],
                core::time::Duration::from_secs(current_time),
            ),
            (
                asset::EOS,
                vec![
                    I64F64::wrapping_from_str("4.71").unwrap(),
                    I64F64::wrapping_from_str("3.84").unwrap(),
                    I64F64::wrapping_from_str("3.90").unwrap(),
                    I64F64::wrapping_from_str("3.66").unwrap(),
                    I64F64::wrapping_from_str("3.55").unwrap(),
                    I64F64::wrapping_from_str("3.67").unwrap(),
                    I64F64::wrapping_from_str("3.46").unwrap(),
                    I64F64::wrapping_from_str("3.70").unwrap(),
                    I64F64::wrapping_from_str("3.67").unwrap(),
                    I64F64::wrapping_from_str("3.84").unwrap(),
                    I64F64::wrapping_from_str("3.76").unwrap(),
                    I64F64::wrapping_from_str("3.70").unwrap(),
                    I64F64::wrapping_from_str("3.73").unwrap(),
                    I64F64::wrapping_from_str("3.84").unwrap(),
                    I64F64::wrapping_from_str("3.90").unwrap(),
                    I64F64::wrapping_from_str("4.17").unwrap(),
                    I64F64::wrapping_from_str("3.99").unwrap(),
                    I64F64::wrapping_from_str("3.96").unwrap(),
                    I64F64::wrapping_from_str("3.79").unwrap(),
                    I64F64::wrapping_from_str("4.29").unwrap(),
                    I64F64::wrapping_from_str("3.97").unwrap(),
                    I64F64::wrapping_from_str("3.82").unwrap(),
                    I64F64::wrapping_from_str("4.07").unwrap(),
                    I64F64::wrapping_from_str("4.08").unwrap(),
                    I64F64::wrapping_from_str("4.17").unwrap(),
                    I64F64::wrapping_from_str("4.16").unwrap(),
                    I64F64::wrapping_from_str("4.35").unwrap(),
                    I64F64::wrapping_from_str("4.17").unwrap(),
                    I64F64::wrapping_from_str("4.11").unwrap(),
                    I64F64::wrapping_from_str("4.12").unwrap(),
                ],
                core::time::Duration::from_secs(current_time),
            ),
            (
                asset::DOT,
                vec![
                    I64F64::wrapping_from_str("30.17").unwrap(),
                    I64F64::wrapping_from_str("29.58").unwrap(),
                    I64F64::wrapping_from_str("33.13").unwrap(),
                    I64F64::wrapping_from_str("32.71").unwrap(),
                    I64F64::wrapping_from_str("32.12").unwrap(),
                    I64F64::wrapping_from_str("34.36").unwrap(),
                    I64F64::wrapping_from_str("33.96").unwrap(),
                    I64F64::wrapping_from_str("37.02").unwrap(),
                    I64F64::wrapping_from_str("37.42").unwrap(),
                    I64F64::wrapping_from_str("40.96").unwrap(),
                    I64F64::wrapping_from_str("41.37").unwrap(),
                    I64F64::wrapping_from_str("44.24").unwrap(),
                    I64F64::wrapping_from_str("45.81").unwrap(),
                    I64F64::wrapping_from_str("43.35").unwrap(),
                    I64F64::wrapping_from_str("39.53").unwrap(),
                    I64F64::wrapping_from_str("41.36").unwrap(),
                    I64F64::wrapping_from_str("40.73").unwrap(),
                    I64F64::wrapping_from_str("41.57").unwrap(),
                    I64F64::wrapping_from_str("41.36").unwrap(),
                    I64F64::wrapping_from_str("40.60").unwrap(),
                    I64F64::wrapping_from_str("42.94").unwrap(),
                    I64F64::wrapping_from_str("42.50").unwrap(),
                    I64F64::wrapping_from_str("43.42").unwrap(),
                    I64F64::wrapping_from_str("41.39").unwrap(),
                    I64F64::wrapping_from_str("42.11").unwrap(),
                    I64F64::wrapping_from_str("37.33").unwrap(),
                    I64F64::wrapping_from_str("34.83").unwrap(),
                    I64F64::wrapping_from_str("35.24").unwrap(),
                    I64F64::wrapping_from_str("33.82").unwrap(),
                    I64F64::wrapping_from_str("33.04").unwrap(),
                ],
                core::time::Duration::from_secs(current_time),
            ),
            (
                asset::CRV,
                vec![
                    I64F64::wrapping_from_str("2.58").unwrap(),
                    I64F64::wrapping_from_str("2.13").unwrap(),
                    I64F64::wrapping_from_str("2.15").unwrap(),
                    I64F64::wrapping_from_str("2.00").unwrap(),
                    I64F64::wrapping_from_str("1.93").unwrap(),
                    I64F64::wrapping_from_str("1.96").unwrap(),
                    I64F64::wrapping_from_str("1.76").unwrap(),
                    I64F64::wrapping_from_str("2.00").unwrap(),
                    I64F64::wrapping_from_str("2.53").unwrap(),
                    I64F64::wrapping_from_str("2.29").unwrap(),
                    I64F64::wrapping_from_str("2.08").unwrap(),
                    I64F64::wrapping_from_str("2.06").unwrap(),
                    I64F64::wrapping_from_str("2.04").unwrap(),
                    I64F64::wrapping_from_str("2.23").unwrap(),
                    I64F64::wrapping_from_str("2.39").unwrap(),
                    I64F64::wrapping_from_str("2.40").unwrap(),
                    I64F64::wrapping_from_str("2.22").unwrap(),
                    I64F64::wrapping_from_str("2.17").unwrap(),
                    I64F64::wrapping_from_str("2.06").unwrap(),
                    I64F64::wrapping_from_str("2.38").unwrap(),
                    I64F64::wrapping_from_str("2.12").unwrap(),
                    I64F64::wrapping_from_str("2.23").unwrap(),
                    I64F64::wrapping_from_str("2.60").unwrap(),
                    I64F64::wrapping_from_str("2.44").unwrap(),
                    I64F64::wrapping_from_str("2.61").unwrap(),
                    I64F64::wrapping_from_str("2.75").unwrap(),
                    I64F64::wrapping_from_str("2.70").unwrap(),
                    I64F64::wrapping_from_str("2.60").unwrap(),
                    I64F64::wrapping_from_str("2.37").unwrap(),
                    I64F64::wrapping_from_str("2.89").unwrap(),
                ],
                core::time::Duration::from_secs(current_time),
            ),
            (
                asset::GENS,
                vec![
                    I64F64::wrapping_from_str("0.04").unwrap(),
                    I64F64::wrapping_from_str("0.04").unwrap(),
                    I64F64::wrapping_from_str("0.04").unwrap(),
                    I64F64::wrapping_from_str("0.04").unwrap(),
                    I64F64::wrapping_from_str("0.04").unwrap(),
                    I64F64::wrapping_from_str("0.04").unwrap(),
                    I64F64::wrapping_from_str("0.04").unwrap(),
                    I64F64::wrapping_from_str("0.04").unwrap(),
                    I64F64::wrapping_from_str("0.04").unwrap(),
                    I64F64::wrapping_from_str("0.04").unwrap(),
                    I64F64::wrapping_from_str("0.04").unwrap(),
                    I64F64::wrapping_from_str("0.04").unwrap(),
                    I64F64::wrapping_from_str("0.04").unwrap(),
                    I64F64::wrapping_from_str("0.04").unwrap(),
                    I64F64::wrapping_from_str("0.04").unwrap(),
                    I64F64::wrapping_from_str("0.04").unwrap(),
                    I64F64::wrapping_from_str("0.04").unwrap(),
                    I64F64::wrapping_from_str("0.04").unwrap(),
                    I64F64::wrapping_from_str("0.04").unwrap(),
                    I64F64::wrapping_from_str("0.04").unwrap(),
                    I64F64::wrapping_from_str("0.04").unwrap(),
                    I64F64::wrapping_from_str("0.04").unwrap(),
                    I64F64::wrapping_from_str("0.04").unwrap(),
                    I64F64::wrapping_from_str("0.04").unwrap(),
                    I64F64::wrapping_from_str("0.04").unwrap(),
                    I64F64::wrapping_from_str("0.04").unwrap(),
                    I64F64::wrapping_from_str("0.04").unwrap(),
                    I64F64::wrapping_from_str("0.04").unwrap(),
                    I64F64::wrapping_from_str("0.04").unwrap(),
                    I64F64::wrapping_from_str("0.04").unwrap(),
                ],
                core::time::Duration::from_secs(current_time),
            ),
            (
                asset::DAI,
                vec![
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                ],
                core::time::Duration::from_secs(current_time),
            ),
            (
                asset::USDT,
                vec![
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                ],
                core::time::Duration::from_secs(current_time),
            ),
            (
                asset::BUSD,
                vec![
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                ],
                core::time::Duration::from_secs(current_time),
            ),
            (
                asset::USDC,
                vec![
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                ],
                core::time::Duration::from_secs(current_time),
            ),
            (
                asset::BNB,
                vec![
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                ],
                core::time::Duration::from_secs(current_time),
            ),
            (
                asset::WBTC,
                vec![
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                ],
                core::time::Duration::from_secs(current_time),
            ),
            (
                asset::ACA,
                vec![
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                ],
                core::time::Duration::from_secs(current_time),
            ),
            (
                asset::AUSD,
                vec![
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                ],
                core::time::Duration::from_secs(current_time),
            ),
            (
                asset::GLMR,
                vec![
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                ],
                core::time::Duration::from_secs(current_time),
            ),
            (
                asset::PARA,
                vec![
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                ],
                core::time::Duration::from_secs(current_time),
            ),
            (
                asset::EQDOT,
                vec![
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                    I64F64::wrapping_from_str("1.00").unwrap(),
                ],
                core::time::Duration::from_secs(current_time),
            ),
        ],
    }
}
