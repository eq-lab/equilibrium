
//! Autogenerated weights for `pallet_scheduler`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-09, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `muctep-osx-m1.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/eq-node
// benchmark
// pallet
// --chain=dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_scheduler
// --extrinsic=*
// --steps
// 50
// --repeat
// 20
// --output
// ./runtime/equilibrium/src/weights/pallet_scheduler.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight}};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_scheduler`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_scheduler::WeightInfo for WeightInfo<T> {
	fn service_agendas_base() -> Weight { todo!() }
	fn service_agenda_base(_: u32) -> Weight { todo!() }
	fn service_task_base() -> Weight { todo!() }
	fn service_task_fetched(_: u32) -> Weight { todo!() }
	fn service_task_named() -> Weight { todo!() }
	fn service_task_periodic() -> Weight { todo!() }
	fn execute_dispatch_signed() -> Weight { todo!() }
	fn execute_dispatch_unsigned() -> Weight { todo!() }
	// Storage: Scheduler Agenda (r:1 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn schedule(s: u32, ) -> Weight {
		Weight::from_parts(15_704_000 as u64, 0)
			// Standard Error: 5_000
			.saturating_add(Weight::from_parts(56_000 as u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Scheduler Agenda (r:1 w:1)
	// Storage: Scheduler Lookup (r:0 w:1)
	/// The range of component `s` is `[1, 10]`.
	fn cancel(s: u32, ) -> Weight {
		Weight::from_parts(15_505_000 as u64, 0)
			// Standard Error: 11_000
			.saturating_add(Weight::from_parts(929_000 as u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Scheduler Lookup (r:1 w:1)
	// Storage: Scheduler Agenda (r:1 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn schedule_named(s: u32, ) -> Weight {
		Weight::from_parts(17_635_000 as u64, 0)
			// Standard Error: 11_000
			.saturating_add(Weight::from_parts(382_000 as u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Scheduler Lookup (r:1 w:1)
	// Storage: Scheduler Agenda (r:1 w:1)
	/// The range of component `s` is `[1, 10]`.
	fn cancel_named(s: u32, ) -> Weight {
		Weight::from_parts(16_079_000 as u64, 0)
			// Standard Error: 8_000
			.saturating_add(Weight::from_parts(1_285_000 as u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
}
