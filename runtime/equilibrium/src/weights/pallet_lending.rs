
//! Autogenerated weights for `eq_lending`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-09, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `muctep-osx-m1.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/eq-node
// benchmark
// pallet
// --chain=dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// eq_lending
// --extrinsic=*
// --steps
// 50
// --repeat
// 20
// --output
// ./runtime/equilibrium/src/weights/pallet_lending.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight}};
use sp_std::marker::PhantomData;

/// Weight functions for `eq_lending`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> eq_lending::WeightInfo for WeightInfo<T> {
	// Storage: EqAssets Assets (r:1 w:0)
	// Storage: EqLending Lenders (r:1 w:1)
	// Storage: EqLending CumulatedReward (r:1 w:0)
	// Storage: EqBalances TempMigration (r:2 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Subaccounts OwnerAccount (r:2 w:0)
	// Storage: EqAggregates AccountUserGroups (r:6 w:0)
	// Storage: EqAggregates TotalUserGroups (r:2 w:2)
	// Storage: EqLending LendersAggregates (r:1 w:1)
	fn deposit() -> Weight {
		Weight::from_ref_time(164_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(17 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: EqLending Lenders (r:1 w:1)
	// Storage: EqLending CumulatedReward (r:1 w:0)
	// Storage: EqAssets Assets (r:1 w:0)
	// Storage: EqBalances TempMigration (r:2 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Subaccounts OwnerAccount (r:2 w:0)
	// Storage: EqAggregates AccountUserGroups (r:6 w:0)
	// Storage: EqAggregates TotalUserGroups (r:3 w:2)
	// Storage: EqLending LendersAggregates (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: EqLending OnlyBailsmanTill (r:1 w:0)
	fn withdraw() -> Weight {
		Weight::from_ref_time(166_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(20 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: EqLending Lenders (r:1 w:1)
	// Storage: EqLending CumulatedReward (r:1 w:0)
	// Storage: EqAssets Assets (r:1 w:0)
	// Storage: EqBalances TempMigration (r:2 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Subaccounts OwnerAccount (r:2 w:0)
	// Storage: EqAggregates AccountUserGroups (r:6 w:0)
	// Storage: EqAggregates TotalUserGroups (r:1 w:1)
	fn payout() -> Weight {
		Weight::from_ref_time(102_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(15 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
}
