
//! Autogenerated weights for `eq_lockdrop`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-14, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `muctep-osx-m1.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("eq-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/eq-node
// benchmark
// pallet
// --chain=eq-dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=eq_lockdrop
// --extrinsic=*
// --steps=50
// --repeat=20
// --output=./runtime/equilibrium/src/weights/pallet_lockdrop.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight}};
use sp_std::marker::PhantomData;

/// Weight functions for `eq_lockdrop`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> eq_lockdrop::WeightInfo for WeightInfo<T> {
	// Storage: EqLockdrop LockStart (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: EqRate NowMillisOffset (r:1 w:0)
	// Storage: Vesting Vesting (r:1 w:0)
	// Storage: EqAssets Assets (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: EqBalances Account (r:1 w:0)
	// Storage: Subaccounts OwnerAccount (r:1 w:0)
	// Storage: EqAggregates AccountUserGroups (r:6 w:1)
	// Storage: EqAggregates TotalUserGroups (r:1 w:1)
	// Storage: EqLockdrop Locks (r:1 w:1)
	fn lock() -> Weight {
		Weight::from_ref_time(122_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(17 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: EqLockdrop LockStart (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: EqRate NowMillisOffset (r:1 w:0)
	// Storage: EqLockdrop Locks (r:1 w:1)
	// Storage: EqAssets Assets (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: EqBalances Account (r:1 w:0)
	// Storage: Subaccounts OwnerAccount (r:1 w:0)
	// Storage: EqAggregates AccountUserGroups (r:6 w:1)
	// Storage: EqAggregates TotalUserGroups (r:1 w:1)
	// Storage: EqRate LastFeeUpdate (r:0 w:1)
	fn unlock() -> Weight {
		Weight::from_ref_time(121_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(16 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: EqLockdrop LockStart (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: EqRate NowMillisOffset (r:1 w:0)
	// Storage: EqLockdrop Locks (r:1 w:1)
	// Storage: EqAssets Assets (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: EqBalances Account (r:1 w:0)
	// Storage: Subaccounts OwnerAccount (r:1 w:0)
	// Storage: EqAggregates AccountUserGroups (r:6 w:1)
	// Storage: EqAggregates TotalUserGroups (r:1 w:1)
	// Storage: EqRate LastFeeUpdate (r:0 w:1)
	fn unlock_external() -> Weight {
		Weight::from_ref_time(121_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(15 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: EqLockdrop LockStart (r:1 w:1)
	fn set_lock_start() -> Weight {
		Weight::from_ref_time(7_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: EqLockdrop LockStart (r:0 w:1)
	fn clear_lock_start() -> Weight {
		Weight::from_ref_time(5_000_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: EqLockdrop AutoUnlockEnabled (r:0 w:1)
	fn set_auto_unlock() -> Weight {
		Weight::from_ref_time(5_000_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: EqRate Keys (r:1 w:0)
	// Storage: EqLockdrop LockStart (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: EqRate NowMillisOffset (r:1 w:0)
	// Storage: EqLockdrop Locks (r:1 w:1)
	// Storage: EqAssets Assets (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: EqBalances Account (r:1 w:0)
	// Storage: Subaccounts OwnerAccount (r:1 w:0)
	// Storage: EqAggregates AccountUserGroups (r:6 w:1)
	// Storage: EqAggregates TotalUserGroups (r:1 w:1)
	// Storage: EqRate LastFeeUpdate (r:0 w:1)
	fn validate_unsigned() -> Weight {
		Weight::from_ref_time(161_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(17 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
}
