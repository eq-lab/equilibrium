
//! Autogenerated weights for `eq_bailsman`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-09, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `muctep-osx-m1.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/eq-node
// benchmark
// pallet
// --chain=dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// eq_bailsman
// --extrinsic=*
// --steps
// 50
// --repeat
// 20
// --output
// ./runtime/equilibrium/src/weights/pallet_bailsman.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight}};
use sp_std::marker::PhantomData;

/// Weight functions for `eq_bailsman`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> eq_bailsman::WeightInfo for WeightInfo<T> {
	// Storage: Bailsman AutoRedistributionEnabled (r:0 w:1)
	fn toggle_auto_redistribution() -> Weight {
		Weight::from_parts(6_000_000 as u64, 0)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: EqRate Keys (r:1 w:0)
	// Storage: Bailsman DistributionQueue (r:1 w:1)
	// Storage: EqAggregates AccountUserGroups (r:6 w:0)
	// Storage: Bailsman LastDistribution (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: EqAssets Assets (r:1 w:0)
	// Storage: EqBalances TempMigration (r:2 w:0)
	// Storage: EqAggregates TotalUserGroups (r:42 w:42)
	/// The range of component `z` is `[1, 50]`.
	fn redistribute_unsigned(z: u32, ) -> Weight {
		Weight::from_parts(835_494_000 as u64, 0)
			// Standard Error: 43_000
			.saturating_add(Weight::from_parts(7_178_000 as u64, 0).saturating_mul(z as u64))
			.saturating_add(T::DbWeight::get().reads(56 as u64))
			.saturating_add(T::DbWeight::get().writes(46 as u64))
	}
	// Storage: EqAggregates AccountUserGroups (r:6 w:0)
	// Storage: Bailsman LastDistribution (r:1 w:1)
	// Storage: Bailsman DistributionQueue (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: EqAssets Assets (r:1 w:0)
	// Storage: EqBalances TempMigration (r:2 w:0)
	// Storage: EqAggregates TotalUserGroups (r:42 w:42)
	/// The range of component `z` is `[1, 50]`.
	fn redistribute(z: u32, ) -> Weight {
		Weight::from_parts(805_144_000 as u64, 0)
			// Standard Error: 42_000
			.saturating_add(Weight::from_parts(6_541_000 as u64, 0).saturating_mul(z as u64))
			.saturating_add(T::DbWeight::get().reads(55 as u64))
			.saturating_add(T::DbWeight::get().writes(46 as u64))
	}
	// Storage: Bailsman BailsmenCount (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Oracle PricePoints (r:21 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: EqAssets Assets (r:1 w:0)
	// Storage: EqAggregates TotalUserGroups (r:44 w:42)
	// Storage: EqBalances TempMigration (r:2 w:0)
	// Storage: EqAggregates AccountUserGroups (r:6 w:1)
	// Storage: Bailsman DistributionQueue (r:1 w:1)
	fn on_initialize() -> Weight {
		Weight::from_parts(1_111_000_000 as u64, 0)
			.saturating_add(T::DbWeight::get().reads(79 as u64))
			.saturating_add(T::DbWeight::get().writes(46 as u64))
	}
	// Storage: Bailsman DistributionQueue (r:1 w:1)
	/// The range of component `z` is `[1, 50]`.
	fn on_finalize(z: u32, ) -> Weight {
		Weight::from_parts(4_585_000 as u64, 0)
			// Standard Error: 8_000
			.saturating_add(Weight::from_parts(613_000 as u64, 0).saturating_mul(z as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
}
