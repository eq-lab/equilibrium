
//! Autogenerated weights for `equilibrium_curve_amm`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-18, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ivan-GP76`, CPU: `11th Gen Intel(R) Core(TM) i7-11800H @ 2.30GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/eq-node
// benchmark
// pallet
// --chain=dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// equilibrium_curve_amm
// --extrinsic=*
// --steps
// 20
// --repeat
// 10
// --output
// ./runtime/equilibrium/src/weights/pallet_curve_amm.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight}};
use sp_std::marker::PhantomData;

/// Weight functions for `equilibrium_curve_amm`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> equilibrium_curve_amm::WeightInfo for WeightInfo<T> {
	// Storage: EqAssets Assets (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: EqAggregates AccountUserGroups (r:3 w:0)
	// Storage: EqAggregates TotalUserGroups (r:1 w:1)
	// Storage: CurveAmm PoolCount (r:1 w:1)
	// Storage: CurveAmm Pools (r:1 w:1)
	// Storage: FinancialModule PriceLogs (r:18 w:1)
	// Storage: Oracle PricePoints (r:2 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: EqRate NowMillisOffset (r:1 w:0)
	/// The range of component `b` is `[2, 6]`.
	fn create_pool(b: u32, ) -> Weight {
		Weight::from_parts(425_183_000 as u64, 0)
			// Standard Error: 463_000
			.saturating_add(Weight::from_parts(43_417_000 as u64, 0).saturating_mul(b as u64))
			.saturating_add(T::DbWeight::get().reads(26 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(b as u64)))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: CurveAmm Pools (r:1 w:1)
	// Storage: EqAggregates TotalUserGroups (r:3 w:3)
	// Storage: System Account (r:2 w:2)
	// Storage: EqAssets Assets (r:1 w:0)
	// Storage: Subaccounts OwnerAccount (r:2 w:0)
	// Storage: EqAggregates AccountUserGroups (r:6 w:0)
	/// The range of component `b` is `[2, 6]`.
	fn add_liquidity_without_fee(b: u32, ) -> Weight {
		Weight::from_parts(429_228_000 as u64, 0)
			// Standard Error: 6_387_000
			.saturating_add(Weight::from_parts(12_595_000 as u64, 0).saturating_mul(b as u64))
			.saturating_add(T::DbWeight::get().reads(13 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(b as u64)))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(b as u64)))
	}
	// Storage: CurveAmm Pools (r:1 w:1)
	// Storage: EqAggregates TotalUserGroups (r:3 w:3)
	// Storage: System Account (r:2 w:2)
	// Storage: EqAssets Assets (r:1 w:0)
	// Storage: Subaccounts OwnerAccount (r:2 w:0)
	// Storage: EqAggregates AccountUserGroups (r:6 w:0)
	/// The range of component `b` is `[2, 6]`.
	fn add_liquidity_with_fee(b: u32, ) -> Weight {
		Weight::from_parts(101_855_000 as u64, 0)
			// Standard Error: 212_000
			.saturating_add(Weight::from_parts(74_436_000 as u64, 0).saturating_mul(b as u64))
			.saturating_add(T::DbWeight::get().reads(13 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(b as u64)))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(b as u64)))
	}
	// Storage: CurveAmm Pools (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: EqAssets Assets (r:1 w:0)
	// Storage: Subaccounts OwnerAccount (r:2 w:0)
	// Storage: EqAggregates AccountUserGroups (r:6 w:0)
	// Storage: EqAggregates TotalUserGroups (r:2 w:2)
	fn exchange() -> Weight {
		Weight::from_parts(221_727_000 as u64, 0)
			.saturating_add(T::DbWeight::get().reads(14 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: CurveAmm Pools (r:1 w:1)
	// Storage: EqAggregates TotalUserGroups (r:3 w:3)
	// Storage: EqAssets Assets (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: EqAggregates AccountUserGroups (r:6 w:0)
	// Storage: Subaccounts OwnerAccount (r:2 w:0)
	/// The range of component `b` is `[2, 6]`.
	fn remove_liquidity(b: u32, ) -> Weight {
		Weight::from_parts(78_330_000 as u64, 0)
			// Standard Error: 206_000
			.saturating_add(Weight::from_parts(74_340_000 as u64, 0).saturating_mul(b as u64))
			.saturating_add(T::DbWeight::get().reads(13 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(b as u64)))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(b as u64)))
	}
	// Storage: CurveAmm Pools (r:1 w:1)
	// Storage: EqAggregates TotalUserGroups (r:3 w:3)
	// Storage: EqAssets Assets (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: EqAggregates AccountUserGroups (r:6 w:0)
	// Storage: Subaccounts OwnerAccount (r:2 w:0)
	/// The range of component `b` is `[2, 6]`.
	fn remove_liquidity_imbalance(b: u32, ) -> Weight {
		Weight::from_parts(80_737_000 as u64, 0)
			// Standard Error: 309_000
			.saturating_add(Weight::from_parts(78_641_000 as u64, 0).saturating_mul(b as u64))
			.saturating_add(T::DbWeight::get().reads(13 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(b as u64)))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(b as u64)))
	}
	// Storage: CurveAmm Pools (r:1 w:1)
	// Storage: EqAggregates TotalUserGroups (r:2 w:2)
	// Storage: System Account (r:2 w:2)
	// Storage: EqAssets Assets (r:1 w:0)
	// Storage: EqAggregates AccountUserGroups (r:6 w:0)
	// Storage: Subaccounts OwnerAccount (r:2 w:0)
	fn remove_liquidity_one_coin() -> Weight {
		Weight::from_parts(196_053_000 as u64, 0)
			.saturating_add(T::DbWeight::get().reads(14 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: CurveAmm Pools (r:1 w:1)
	// Storage: EqAssets Assets (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Subaccounts OwnerAccount (r:1 w:0)
	// Storage: EqAggregates AccountUserGroups (r:6 w:0)
	// Storage: EqAggregates TotalUserGroups (r:1 w:1)
	fn withdraw_admin_fees() -> Weight {
		Weight::from_parts(127_601_000 as u64, 0)
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: CurveAmm Pools (r:0 w:1)
	fn set_enable_state() -> Weight {
		Weight::from_parts(98_000_000 as u64, 0)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}

}
